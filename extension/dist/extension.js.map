{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://peritus/./src/SidebarProvider.ts","webpack://peritus/./src/getNonce.ts","webpack://peritus/external commonjs \"vscode\"","webpack://peritus/webpack/bootstrap","webpack://peritus/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\nimport getNonce from \"./getNonce\";\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  _view?: vscode.WebviewView;\n  _doc?: vscode.TextDocument;\n\n  constructor(private readonly _extensionUri: vscode.Uri) {\n    // TODO: do we need this?\n    vscode.window.onDidChangeActiveTextEditor((editor) => {\n      if (editor) {\n        this._doc = editor.document;\n      }\n    });\n\n    // Set the initial value for _doc\n    if (vscode.window.activeTextEditor) {\n      this._doc = vscode.window.activeTextEditor.document;\n    }\n  }\n\n  public resolveWebviewView(webviewView: vscode.WebviewView) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      // Allow scripts in the webview\n      enableScripts: true,\n\n      localResourceRoots: [this._extensionUri],\n    };\n\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n    webviewView.webview.onDidReceiveMessage(async (data) => {\n      switch (data.type) {\n        case \"replace-in-file\": {\n          const editor = vscode.window.activeTextEditor;\n          let success = false;\n          if (editor) {\n            const document = editor.document;\n            const selectedText = editor.selection;\n\n            const workspaceEdit = new vscode.WorkspaceEdit();\n            workspaceEdit.replace(document.uri, selectedText, data.value);\n\n            await vscode.workspace.applyEdit(workspaceEdit);\n            success = true;\n          } else {\n            vscode.window.showErrorMessage(\"No file open\");\n          }\n          // this._view?.webview.postMessage({\n          //   type: \"file-replace\",\n          //   value: success,\n          // });\n          break;\n        }\n        case \"get-file-contents\": {\n          const editor = vscode.window.activeTextEditor;\n          let file_contents = \"\";\n          if (editor) {\n            file_contents = editor.document.getText();\n          }\n          this._view?.webview.postMessage({\n            type: \"file-contents\",\n            value: file_contents,\n          });\n          break;\n        }\n        case \"get-selection\": {\n          const editor = vscode.window.activeTextEditor;\n          let selected_code = \"\";\n          let start_line = 0;\n          if (editor) {\n            const selection = editor.selection;\n            selected_code = editor.document.getText(selection);\n            // line numbers are 0-based, add 1 for display\n            start_line = selection.start.line + 1;\n          }\n          this._view?.webview.postMessage({\n            type: \"selection-change\",\n            value: selected_code,\n            start_line: start_line,\n          });\n          break;\n        }\n        case \"run-code\": {\n          vscode.commands.executeCommand(\"peritus.runCode\");\n          break;\n        }\n        case \"open-settings\": {\n          vscode.commands.executeCommand(\"workbench.action.openSettings\", \"@ext:peritus.peritus\");\n        }\n        case \"get-settings\": {\n          const settings = vscode.workspace.getConfiguration(\"peritus\");\n          // console.log(settings);\n          this._view?.webview.postMessage({\n            type: \"settings\",\n            value: settings,\n          });\n        }\n        case \"onInfo\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showInformationMessage(data.value);\n          break;\n        }\n        case \"onError\": {\n          if (!data.value) {\n            return;\n          }\n          vscode.window.showErrorMessage(data.value);\n          break;\n        }\n      }\n    });\n  }\n\n  public revive(panel: vscode.WebviewView) {\n    this._view = panel;\n  }\n\n  private _getHtmlForWebview(webview: vscode.Webview) {\n    const styleResetUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\n    );\n    const styleVSCodeUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\n    );\n    const stylePrismUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"prism.css\")\n    );\n\n    const scriptUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.js\")\n    );\n    const styleMainUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.css\")\n    );\n\n    // const scriptUri = webview.asWebviewUri(\n    //   vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/askPeritus.js\")\n    // );\n    // const styleMainUri = webview.asWebviewUri(\n    //   vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/askPeritus.css\")\n    // );\n\n    // Use a nonce to only allow a specific script to be run.\n    const nonce = getNonce();\n\n    return `<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<!--\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\n\t\t\t\t\tand only allow scripts that have a specific nonce.\n        -->\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"Content-Security-Policy\" content=\"img-src https: data:; style-src 'unsafe-inline' ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n        <link href=\"${stylePrismUri}\" rel=\"stylesheet\">\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n        <script nonce=\"${nonce}\">\n          const tsvscode = acquireVsCodeApi();\n        </script>\n\t\t\t</head>\n      <body>\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\" ></script>\n\t\t\t</body>\n\t\t\t</html>`;\n  }\n}\n\n// TODO: Understand content security policy\n","export default function getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 32; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { HelloWorldPanel } from \"./HelloWorldPanel\";\nimport { SidebarProvider } from \"./SidebarProvider\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  const sidebarProvider = new SidebarProvider(context.extensionUri);\n  context.subscriptions.push(\n    vscode.window.registerWebviewViewProvider(\n      \"peritus-sidebar\",\n      sidebarProvider\n    )\n  );\n\n  // The command has been defined in the package.json file\n  // Now provide the implementation of the command with registerCommand\n  // The commandId parameter must match the command field in package.json\n\n  // context.subscriptions.push disposes of the listener when we're done\n  // context.subscriptions.push(\n  //   vscode.commands.registerCommand(\"peritus.helloWorld\", () => {\n  //     // The code you place here will be executed every time your command is executed\n  //     // Display a message box to the user\n  //     vscode.window.showInformationMessage(\"Hello from Peritus AI!\");\n  //     // HelloWorldPanel.createOrShow(context.extensionUri);\n  //   })\n  // );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"peritus.refresh\", async () => {\n      // HelloWorldPanel.kill();\n      // HelloWorldPanel.createOrShow(context.extensionUri);\n      await vscode.commands.executeCommand(\"workbench.action.closeSidebar\");\n      await vscode.commands.executeCommand(\n        \"workbench.view.extension.peritus-ai-sidebar-view\"\n      );\n      // setTimeout(() => {\n      // \tvscode.commands.executeCommand(\"workbench.action.webview.openDeveloperTools\");\n      // }, 500);\n    })\n  );\n\n  context.subscriptions.push(\n    vscode.window.onDidChangeTextEditorSelection(() => {\n      const { activeTextEditor } = vscode.window;\n      if (!activeTextEditor) return;\n      // vscode.window.showInformationMessage(\"Selection changed\");\n      const selection = activeTextEditor.selection;\n      const selected_code = activeTextEditor.document.getText(selection);\n      // line numbers are 0-based, add 1 for display\n      const start_line = selection.start.line + 1;\n\n      sidebarProvider._view?.webview.postMessage({\n        type: \"selection-change\",\n        value: selected_code,\n        start_line: start_line,\n      });\n    })\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"peritus.runCode\", async () => {\n      //   console.log(\"Task started\");\n      //   const runCode = vscode.workspace.workspaceFolders\n      // \t? vscode.workspace.workspaceFolders[0].uri.fsPath\n      // \t: \"\";\n      const activeEditor = vscode.window.activeTextEditor;\n\n\t    //   TODO: make consistent\n      if (!activeEditor) {\n        vscode.window.showWarningMessage(\n          \"No active text editor found. Please open a file to run.\"\n        );\n        return;\n      }\n\n      const activeFile = activeEditor.document.fileName;\n\n      const task = new vscode.Task(\n        { type: \"peritus\" },\n        vscode.TaskScope.Workspace,\n        \"Run Code\",\n        \"Peritus\",\n        new vscode.ShellExecution(`python3 \"${activeFile}\"`)\n      );\n\n      task.group = vscode.TaskGroup.Build;\n      task.problemMatchers = [\"$eslint-stylish\"];\n\n      await vscode.tasks.executeTask(task);\n    })\n  );\n\n  vscode.tasks.onDidEndTaskProcess(async (event) => {\n    if (event.execution.task.name === \"Run Code\") {\n      const error = event.exitCode !== 0;\n      sidebarProvider._view?.webview.postMessage({\n\t\t\ttype: \"code-run\",\n\t\t\tvalue: error,\n\t\t});\n    }\n  });\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}"],"names":["constructor","_extensionUri","vscode","window","onDidChangeActiveTextEditor","editor","this","_doc","document","activeTextEditor","resolveWebviewView","webviewView","_view","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","async","data","type","success","selectedText","selection","workspaceEdit","WorkspaceEdit","replace","uri","value","workspace","applyEdit","showErrorMessage","file_contents","getText","postMessage","selected_code","start_line","start","line","commands","executeCommand","settings","getConfiguration","showInformationMessage","revive","panel","styleResetUri","asWebviewUri","Uri","joinPath","styleVSCodeUri","stylePrismUri","scriptUri","styleMainUri","nonce","cspSource","text","possible","i","charAt","Math","floor","random","length","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","sidebarProvider","SidebarProvider","extensionUri","subscriptions","push","registerWebviewViewProvider","registerCommand","onDidChangeTextEditorSelection","activeEditor","showWarningMessage","activeFile","fileName","task","Task","TaskScope","Workspace","ShellExecution","group","TaskGroup","Build","problemMatchers","tasks","executeTask","onDidEndTaskProcess","event","execution","name","error","exitCode"],"sourceRoot":""}